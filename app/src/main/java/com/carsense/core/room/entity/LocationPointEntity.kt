package com.carsense.core.room.entity

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Index
import androidx.room.PrimaryKey
import com.carsense.features.vehicles.data.db.VehicleEntity
import java.util.UUID

@Entity(
    tableName = "location_points",
    foreignKeys =
        [
            ForeignKey(
                entity = VehicleEntity::class, // We'll define VehicleEntity later
                parentColumns = ["local_id"],
                childColumns = ["vehicle_local_id"],
                onDelete = ForeignKey.CASCADE // Or SET_NULL if a location point can
                // exist without a vehicle
            )],
    indices = [Index(value = ["vehicle_local_id"]), Index(value = ["uuid"], unique = true)]
)
data class LocationPointEntity(
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "local_id") val localId: Long = 0,

    // This UUID will be generated by the client when the record is created.
    // It can be used to reconcile with the server-side record if needed.
    // The server might use this UUID or its own.
    @ColumnInfo(name = "uuid") val uuid: String = UUID.randomUUID().toString(),
    @ColumnInfo(name = "vehicle_local_id")
    val vehicleLocalId: Long?, // Nullable for now, can be made non-nullable if required
    @ColumnInfo(name = "latitude") val latitude: Double,
    @ColumnInfo(name = "longitude") val longitude: Double,
    @ColumnInfo(name = "altitude") val altitude: Double?,
    @ColumnInfo(name = "speed_mps") // meters per second
    val speed: Float?,
    @ColumnInfo(name = "accuracy_meters")
    val accuracy: Float?, // Changed from Double to Float to match Location.accuracy
    @ColumnInfo(name = "timestamp") val timestamp: Long, // Epoch milliseconds
    @ColumnInfo(
        name = "is_synced",
        defaultValue = "0"
    ) // SQLite uses 0 for false, 1 for true for Booleans
    val isSynced: Boolean = false
)
